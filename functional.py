import sys,resource
resource.setrlimit(resource.RLIMIT_STACK,[0x80000000,resource.RLIM_INFINITY])
sys.setrecursionlimit(0x10000000)
A=lambda a:a(a)
B=lambda b:A(lambda c:b(lambda *d:c(c)(*d)))
C=lambda a,b,c:c(lambda d:d(a,b))
D=lambda a,b:a(lambda c,d:b(c))
E=lambda a,b:a(lambda c,d:b(d))
F=lambda a:exit(a)
G=(lambda a:lambda b:(lambda c:C(c[0],None,b)if(c)else(F(1)))(a(1)))(sys.stdin.buffer.read)
H=(lambda a:lambda b,c:D(b,lambda d:(a(bytes([d])),E(b,c))))(sys.stdout.buffer.write)
I=B(lambda a:lambda b,c:c(None)if(b==0)else(G(lambda d:D(d,lambda e:a(b-1,lambda f:C(e,f,c))))))
J=lambda a,b:B(lambda c:lambda d:b()if(d==None)else(H(d,lambda e:c(e))))(a)
K=lambda a,b,c:B(lambda d:lambda e,f:c(e)if(f==0)else(E(e,lambda g:d(g,f-1))))(a,b)
L=lambda a,b,c:K(a,b,lambda d:D(d,c))
M=B(lambda a:lambda b,c,d:d(None)if(c==0)else(b(lambda e,f:a(f,c-1,lambda g:C(e,g,d)))))
N=lambda a,b,c,d:K(a,b,lambda e:M(e,c,d))
O=lambda a,b:B(lambda c:lambda d,e:b(e)if(d==None)else(E(d,lambda f:c(f,e+1))))(a,0)
P=B(lambda a:lambda b,c,d:d(c)if(b==None)else(b(lambda e,f:a(f,c,lambda g:C(e,g,d)))))
Q=lambda a,b:B(lambda c:lambda d,e:b(e)if(d==None)else(d(lambda f,g:C(f,e,lambda h:c(g,h)))))(a,None)
R=lambda a,b,c:B(lambda d:lambda e,f,g:g(None)if(e==None)else(e(lambda h,i:b(h,f,lambda j:d(i,f+1,lambda k:C(j,k,g))))))(a,0,c)
S=lambda a,b,c:B(lambda d:lambda e,f,g:c((g)and(e==None)and(f==None))if((e==None)or(f==None))else(e(lambda h,i:f(lambda j,k:d(i,k,(g)and(h==j))))))(a,b,True)
T=B(lambda a:lambda b,c:c(0)if(b==None)else(b(lambda d,e:a(e,lambda v:c(d|(v<<8))))))
U=B(lambda a:lambda b,c,d:d(None)if(c==0)else(a(b>>8,c-1,lambda e:C(b&0xff,e,d))))
del sys,resource
all=(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)